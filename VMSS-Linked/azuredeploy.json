{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01-preview/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "vmSku": {
      "type": "string",
      "defaultValue": "Standard_A1",
      "metadata": {
        "description": "Size of VMs in the VM Scale Set."
      }
    },
    "WorkerNodeDSCConfigURL": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/artisticcheese/SwarmARM/master/VMSS-Linked/swarmhost.ps1",
      "metadata": {
        "description": "URL where configuration file for worker node is stored"
      }

    },
    "SwarmManagerNodeDSCConfigURL": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/artisticcheese/SwarmARM/master/VMSS-Linked/swarmmanager.ps1",
      "metadata": {
        "description": "URL where configuration file for worker node is stored"
      }

    },
    "windowsOSVersion": {
      "type": "string",
      "defaultValue": "2016-Datacenter-with-Containers",
      "allowedValues": [
        "2008-R2-SP1",
        "2012-Datacenter",
        "2012-R2-Datacenter",
        "2016-Datacenter-with-Containers"
      ],
      "metadata": {
        "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version. Allowed values: 2008-R2-SP1, 2012-Datacenter, 2012-R2-Datacenter."
      }
    },
    "registrationKey": {
      "type": "securestring",
      "metadata": {
        "description": "Registration key to use to onboard to the Azure Automation DSC pull/reporting server"
      }
    },
    "AutomationaccountName": {
      "type": "string",
      "metadata": {
        "description": "Name of automation account"
      }
    },
    "AutomationaccountRGName": {
      "type": "string",
      "metadata": {
        "description": "Name of automation account"
      }
    },
    "privateKey": {
      "type": "securestring",
      "metadata": {
        "description": "Private Key for server certificate for Docker swarm"
      }
    },
    "serverCert": {
      "type": "securestring",
      "metadata": {
        "description": "Server certificate for for Docker swarm"
      }
    },
    "CACert": {
      "type": "securestring",
      "metadata": {
        "description": "Certificate authority for Server certificate for for Docker swarm"
      }
    },

    "registrationUrl": {
      "type": "string",
      "metadata": {
        "description": "Registration url of the Azure Automation DSC pull/reporting server"
      }
    },
    "LicenseType": {
      "type": "string",
      "metadata": { "descrition": "Use hybrid benefit for Windows OS" },
      "defaultValue": ""
    },
    "vmssName": {
      "type": "string",
      "metadata": {
        "description": "String used as a base for naming resources. Must be 3-57 characters in length and globally unique across Azure. A hash is prepended to this string for some resources, and resource-specific information is appended."
      },
      "maxLength": 57
    },
    "instanceCount": {
      "type": "int",
      "metadata": {
        "description": "Number of VM instances (100 or less)."
      },
      "maxValue": 100
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Admin username on all VMs."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin password on all VMs."
      }
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "Auto-generated container in staging storage account to receive post-build staging folder upload"
      }
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "Auto-generated token to access _artifactsLocation"
      }
    },
    "dockerswarmstorageaccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_ZRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Premium_LRS"
      ]
    },
    "swarmmanager1Name": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "swarmmanager1"
    }
  },
  "variables": {
    "namingInfix": "[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]",
    "longNamingInfix": "[toLower(parameters('vmssName'))]",
    "addressPrefix": "10.0.0.0/16",
    "subnetPrefix": "10.0.8.0/21",
    "virtualNetworkName": "[concat(variables('namingInfix'), 'vnet')]",
    "natPoolName": "[concat(variables('namingInfix'), 'natpool')]",
    "publicIPAddressName": "[concat(variables('namingInfix'), 'pip')]",
    "subnetName": "[concat(variables('namingInfix'), 'subnet')]",
    "nicName": "[concat(variables('namingInfix'), 'nic')]",
    "ipConfigName": "[concat(variables('namingInfix'), 'ipconfig')]",
    "imageReference": {
      "publisher": "MicrosoftWindowsServer",
      "offer": "WindowsServer",
      "sku": "[parameters('windowsOSVersion')]",
      "version": "latest"
    },
    "dscModules": {
      "cDSCDockerSwarm": {
        "moduleName": "cDSCDockerSwarm",
        "moduleUri": "https://raw.github.com/Azure/azure-quickstart-templates/master/201-vmss-automation-dsc/xNetworking.zip"
      }
    },
    "automationApiVersion": "2015-10-31",
    "DSCArchiveFolder": "DSC",
    "DSCArchiveFileName": "DSC.zip",
    "DSCConfigurationURL": "[concat(parameters('_artifactsLocation'), '/', variables('DSCArchiveFolder'), '/', variables('DSCArchiveFileName'), parameters('_artifactsLocationSasToken'))]",
    "virtualNetworkID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "appGwPublicIPAddressName": "[concat(variables('namingInfix'), 'appGwPip')]",
    "bePoolName": "[concat(variables('namingInfix'), 'bepool')]",
    "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/loadBalancerFrontEnd')]",
    "appGwName": "[concat(variables('namingInfix'), 'appGw')]",
    "loadBalancerName": "[concat(variables('namingInfix'), 'lb')]",
    "publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerName'))]",
    "appGwPublicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('appGwPublicIPAddressName'))]",
    "appGwID": "[resourceId('Microsoft.Network/applicationGateways',variables('appGwName'))]",
    "appGwSubnetName": "[concat(variables('namingInfix'),'appGwSubnet')]",
    "appGwSubnetPrefix": "10.0.1.0/24",
    "appGwSubnetID": "[concat(variables('virtualNetworkID'),'/subnets/',variables('appGwSubnetName'))]",
    "appGwFrontendPort": 80,
    "appGwBackendPort": 80,
    "appGwBePoolName": "[concat(variables('namingInfix'), 'appGwBepool')]",
    "computeApiVersion": "2016-04-30-preview",
    "networkApiVersion": "2016-03-30",
    "natStartPort": 50000,
    "natEndPort": 50119,
    "natBackendPort": 3389,
    "dockerswarmstorageaccountName": "[concat('sa', uniqueString(resourceGroup().id))]",
    "swarmmanager1ImagePublisher": "MicrosoftWindowsServer",
    "swarmmanager1ImageOffer": "WindowsServer",
    "swarmmanager1OSDiskName": "[concat('swarmmanager1OSDisk', uniqueString(resourceGroup().id))]",
    "swarmmanager1VmSize": "Standard_D2_v2",
    "swarmmanager1VnetID": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
    "swarmmanager1SubnetRef": "[concat(variables('swarmmanager1VnetID'), '/subnets/', variables('subnetName'))]",
    "swarmmanager1StorageAccountContainerName": "vhds",
    "swarmmanager1NicName": "[concat(parameters('swarmmanager1Name'), 'NetworkInterface')]",
    "swarmmanagerpublicIPName": "[uniqueString(resourceGroup().id)]",
    "swarmmanagerdeploymentTemplateFolder": "nestedtemplates",
    "swarmmanagerdeploymentTemplateFileName": "swarmmanagerdeployment.json"
  },
  "resources": [
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('networkApiVersion')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]"
            }
          },
          {
            "name": "[variables('appGwSubnetName')]",
            "properties": {
              "addressPrefix": "[variables('appGwSubnetPrefix')]"
            }
          }
        ]
      }
    },
    //{
    //  "type": "Microsoft.Automation/automationAccounts/configurations",
    //  "name": "automationaccount/swarmhost.localhost",
    //  "location": "SouthCentralUS",
    //  "apiVersion": "[variables('automationApiVersion')]",
    //  "properties": {
    //    "logVerbose": "false",
    //    "description": "Configuration for worker hosts",
    //    "Source": {
    //      "type": "uri",
    //      "Value": "https://raw.githubusercontent.com/artisticcheese/SwarmARM/master/VMSS-Linked/swarmhost.ps1"
    //    }
    //  }
    //},
    //{
    //  "name": "[resourceId('Utility-RG', 'Microsoft.Automation/automationAccounts/', 'AutomationAccount')]",
    //  "type": "Microsoft.Automation/automationAccounts",
    //  "apiVersion": "2015-01-01-preview",
    //  "location": "SouthCentralUS",
    //  "dependsOn": [],
    //  "resources": [


    //    {
    //      "name": "[uniqueString(resourceGroup().id, deployment().name)]",
    //      "type": "Compilationjobs",
    //      "apiVersion": "[variables('automationApiVersion')]",
    //      "location": "parameters('automationRegionId')]",
    //      "tags": {},
    //      "dependsOn": [
    //        "[concat('Microsoft.Automation/automationAccounts/', parameters('automationAccountName'))]",

    //        "[concat('Microsoft.Automation/automationAccounts/', parameters('automationAccountName'),'/Configurations/swarmhost.localhost')]"
    //      ],
    //      "properties": {
    //        "configuration": {
    //          "name": "swarmhost.localhost"
    //        },
    //        "parameters": {
    //          "SwarmManagerURI": "[reference('swarmmanagerdeployment').outputs.returnedIPAddress.value]"
    //        }
    //      }
    //    }


    //  ]
    //},
    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('loadBalancerName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "2017-04-01",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontEnd",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIPAddressID')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('bePoolName')]"
          }
        ],
        "inboundNatPools": [
          {
            "name": "[variables('natPoolName')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPortRangeStart": "[variables('natStartPort')]",
              "frontendPortRangeEnd": "[variables('natEndPort')]",
              "backendPort": "[variables('natBackendPort')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('appGwPublicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('networkApiVersion')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",

        "dnsSettings": {
          "domainNameLabel": "appgwvip"
        }
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('publicIPAddressName')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",

        "dnsSettings": {
          "domainNameLabel": "rdpvip"
        }
      },
      "type": "Microsoft.Network/publicIPAddresses"
    },
    {
      "type": "Microsoft.Network/applicationGateways",
      "name": "[variables('appGwName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('networkApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/publicIPAddresses/', variables('appGwPublicIPAddressName'))]"
      ],
      "properties": {
        "sku": {
          "name": "Standard_Small",
          "tier": "Standard",
          "capacity": "1"
        },
        "gatewayIPConfigurations": [
          {
            "name": "appGwIpConfig",
            "properties": {
              "subnet": {
                "id": "[variables('appGwSubnetID')]"
              }
            }
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "appGwFrontendIP",
            "properties": {
              "PublicIPAddress": {
                "id": "[variables('appGwPublicIPAddressID')]"
              }
            }
          }
        ],
        "frontendPorts": [
          {
            "name": "appGwFrontendPort",
            "properties": {
              "Port": "[variables('appGwFrontendPort')]"
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('appGwBePoolName')]"
          }
        ],
        "backendHttpSettingsCollection": [
          {
            "name": "appGwBackendHttpSettings",
            "properties": {
              "Port": "[variables('appGwBackendPort')]",
              "Protocol": "Http",
              "CookieBasedAffinity": "Disabled"
            }
          }
        ],
        "httpListeners": [
          {
            "name": "appGwHttpListener",
            "properties": {
              "FrontendIPConfiguration": {
                "Id": "[concat(variables('appGwID'), '/frontendIPConfigurations/appGwFrontendIP')]"
              },
              "FrontendPort": {
                "Id": "[concat(variables('appGwID'), '/frontendPorts/appGwFrontendPort')]"
              },
              "Protocol": "Http",
              "SslCertificate": null
            }
          }
        ],
        "requestRoutingRules": [
          {
            "Name": "rule1",
            "properties": {
              "RuleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('appGwID'), '/httpListeners/appGwHttpListener')]"
              },
              "backendAddressPool": {
                "id": "[concat(variables('appGwID'), '/backendAddressPools/', variables('appGwBePoolName'))]"
              },
              "backendHttpSettings": {
                "id": "[concat(variables('appGwID'), '/backendHttpSettingsCollection/appGwBackendHttpSettings')]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "name": "[variables('namingInfix')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('computeApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/applicationGateways/', variables('appGwName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]",
        "WorkerNodeDscConfiguration"

      ],
      "tags": {
        "test": "1"
      },
      "sku": {
        "name": "[parameters('vmSku')]",
        "tier": "Standard",
        "capacity": "[parameters('instanceCount')]"
      },
      "properties": {
        "overprovision": "false",
        "singlePlacementGroup": "true",
        "upgradePolicy": {
          "mode": "Automatic"
        },
        "virtualMachineProfile": {
          "licenseType": "[parameters('LicenseType')]",
          "storageProfile": {
            "osDisk": {
              "caching": "ReadWrite",
              "createOption": "FromImage"
            },
            "dataDisks": [],
            "imageReference": "[variables('imageReference')]"
          },
          "osProfile": {
            "computerNamePrefix": "[variables('namingInfix')]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]"
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[variables('nicName')]",
                "properties": {
                  "primary": "true",
                  "ipConfigurations": [
                    {
                      "name": "[variables('ipConfigName')]",
                      "properties": {
                        "subnet": {
                          "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('subnetName'))]"
                        },
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/backendAddressPools/', variables('bePoolName'))]"
                          }
                        ],
                        "loadBalancerInboundNatPools": [
                          {
                            "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/inboundNatPools/', variables('natPoolName'))]"
                          }
                        ],
                        "ApplicationGatewayBackendAddressPools": [
                          {
                            "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/applicationGateways/', variables('appGwName'), '/backendAddressPools/', variables('appGwBePoolName'))]"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "extensionProfile": {
            "extensions": [
              {
                "name": "Microsoft.Powershell.DSC",
                "properties": {
                  "autoUpgradeMinorVersion": true,
                  "typeHandlerVersion": "2.72",
                  "type": "DSC",
                  "publisher": "Microsoft.Powershell",
                  //"forceUpdateTag": "[parameters('DSCExtensionTagVersion')]",
                  "settings": {
                    "configurationArguments": {

                      "RegistrationKey": {
                        "UserName": "PLACEHOLDER_DONOTUSE",
                        "Password": "[parameters('registrationKey')]"
                      },
                      "RegistrationUrl": "[parameters('registrationUrl')]",
                      "NodeConfigurationName": "swarmHost",
                      "RebootNodeIfNeeded": true,
                      "ConfigurationMode": "ApplyAndAutoCorrect"
                    }
                  }
                }
              }
            ]
          }
        }
      }
    },

    {
      "name": "swarmmanagerdeployment",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2017-05-10",
      "dependsOn": [],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/', variables('swarmmanagerdeploymentTemplateFolder'), '/', variables('swarmmanagerdeploymentTemplateFileName'), parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "swarmmanager1Name": { "value": "[parameters('swarmmanager1Name')]" },
          "swarmmanager1VmSize": { "value": "[variables('swarmmanager1VmSize')]" },
          "adminUsername": { "value": "[parameters('adminUsername')]" },
          "adminPassword": { "value": "[parameters('adminPassword')]" },
          "dockerswarmstorageaccountName": { "value": "[variables('dockerswarmstorageaccountName')]" },
          "dockerswarmstorageaccountType": { "value": "[parameters('dockerswarmstorageaccountType')]" },
          "swarmmanager1NicName": { "value": "[variables('swarmmanager1NicName')]" },
          "swarmmanagerpublicIPName": { "value": "[variables('swarmmanagerpublicIPName')]" },
          "swarmmanager1SubnetRef": { "value": "[variables('swarmmanager1SubnetRef')]" },
          "swarmmanager1ImagePublisher": { "value": "[variables('swarmmanager1ImagePublisher')]" },
          "swarmmanager1ImageOffer": { "value": "[variables('swarmmanager1ImageOffer')]" },
          "windowsOSVersion": { "value": "[parameters('windowsOSVersion')]" },
          "swarmmanager1StorageAccountContainerName": { "value": "[variables('swarmmanager1StorageAccountContainerName')]" },
          "swarmmanager1OSDiskName": { "value": "[variables('swarmmanager1OSDiskName')]" },
          "swarmmanagerpublicIPDnsName": { "value": "[variables('swarmmanagerpublicIPName')]" },
          "RegistrationKey": { "value": "[parameters('registrationKey')]" },
          "RegistrationUrl": { "value": "[parameters('registrationUrl')]" },
          "LicenseType": { "value": "[parameters('LicenseType')]" },
          "_artifactsLocationSasToken": { "value": "[parameters('_artifactsLocationSasToken')]" },
          "_artifactsLocation": { "value": "[parameters('_artifactsLocation')]" },
          "privateKey": { "value": "[parameters('privateKey')]" },
          "serverCert": { "value": "[parameters('serverCert')]" },
          "CACert": { "value": "[parameters('CACert')]" },
          "automationAccountRGName": { "value": "[parameters('AutomationaccountRGName')]" },
          "automationAccountName": { "value": "[parameters('AutomationaccountName')]" },
          "SwarmManagerNodeDSCConfigURL": { "value": "[parameters('SwarmManagerNodeDSCConfigURL')]" }

        }
      }


    },
    {
      "name": "WorkerNodeDscConfiguration",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2017-05-10",
      "resourceGroup": "[parameters('automationAccountRGName')]",
      "dependsOn": [],
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.1",
          "resources": [
            {
              "apiversion": "2015-10-31",
              "location": "[resourceGroup().location]",
              "name": "[parameters('automationAccountName')]",
              "type": "Microsoft.Automation/automationAccounts",
              "properties": {
                "sku": {
                  "name": "Basic"
                }
              },
              "tags": {

              },
              "resources": [
                {
                  "name": "swarmhost",
                  "type": "configurations",
                  "apiVersion": "2018-01-15",
                  "location": "[resourceGroup().location]",
                  "dependsOn": [
                    "[concat('Microsoft.Automation/automationAccounts/', parameters('AutomationAccountName'))]"
                  ],
                  "properties": {
                    "state": "Published",
                    "overwrite": "true",
                    "Source": {
                      "type": "uri",
                      "value": "[parameters('WorkerNodeDSCConfigURL')]"
                    }
                  }
                },
                {
                  "name": "[guid(resourceGroup().id, deployment().name)]",
                  "type": "Compilationjobs",
                  "apiVersion": "2015-10-31",
                  "tags": {},
                  "dependsOn": [
                    "[concat('Microsoft.Automation/automationAccounts/', parameters('AutomationAccountName'))]",
                    "[concat('Microsoft.Automation/automationAccounts/', parameters('AutomationAccountName'),'/Configurations/swarmhost')]"
                  ],
                  "properties": {
                    "configuration": {
                      "name": "swarmhost"

                    },
                    "parameters": { "SwarmManagerURI": "[reference('swarmmanagerdeployment').outputs.returnedIPAddress.value]" }

                  }
                }

              ]
            }
          ]
        }

      }
    }
    


  ]
}
